(function (_, Kotlin) {
  'use strict';
  var getCallableRef = Kotlin.getCallableRef;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var get_sign = Kotlin.kotlin.math.get_sign_s8ev3n$;
  var equals = Kotlin.equals;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Comparable = Kotlin.kotlin.Comparable;
  var toIntOrNull = Kotlin.kotlin.text.toIntOrNull_pdl1vz$;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  var REGEX;
  var UNSPECIFIED;
  var GIT_DESCRIBE_REGEX;
  function prereleaseFromGit($receiver) {
    return parseGitDescribe($receiver, getCallableRef('nextPrerelease', function ($receiver) {
      return $receiver.nextPrerelease();
    }));
  }
  function patchFromGit($receiver) {
    return parseGitDescribe($receiver, getCallableRef('nextPatch', function ($receiver) {
      return $receiver.nextPatch();
    }));
  }
  function toSemVer($receiver) {
    var tmp$, tmp$_0;
    var tmp$_1;
    if ((tmp$ = REGEX.matchEntire_6bul2c$($receiver)) != null) {
      var tmp$_2 = tmp$.groupValues;
      var major = tmp$_2.get_za3lpa$(1);
      var minor = tmp$_2.get_za3lpa$(2);
      var patch = tmp$_2.get_za3lpa$(3);
      var suffix = tmp$_2.get_za3lpa$(4);
      tmp$_1 = new SemVer(toInt(major), toInt(minor), toInt(patch), (suffix.length === 0 ? '-' : suffix).substring(1));
    }
     else
      tmp$_1 = null;
    return (tmp$_0 = tmp$_1) != null ? tmp$_0 : UNSPECIFIED;
  }
  function SemVer(major, minor, patch, suffix) {
    this.major = major;
    this.minor = minor;
    this.patch = patch;
    this.suffix = suffix;
  }
  SemVer.prototype.compareTo_11rb$ = function (other) {
    var tmp$;
    if (this.major !== other.major)
      tmp$ = this.major - other.major | 0;
    else if (this.minor !== other.minor)
      tmp$ = this.minor - other.minor | 0;
    else if (this.patch !== other.patch)
      tmp$ = this.patch - other.patch | 0;
    else
      tmp$ = Kotlin.compareTo(this.suffix, other.suffix);
    return get_sign(tmp$);
  };
  SemVer.prototype.nexMajor = function () {
    return this.copy_94qy4s$(this.major + 1 | 0, 0, 0, '');
  };
  SemVer.prototype.nextMinor = function () {
    return this.copy_94qy4s$(void 0, this.minor + 1 | 0, 0, '');
  };
  SemVer.prototype.nextPatch = function () {
    return this.copy_94qy4s$(void 0, void 0, this.patch + 1 | 0, '');
  };
  SemVer.prototype.nextPrerelease = function () {
    if (equals(this.suffix, ''))
      return getCallableRef('nextMinor', function ($receiver) {
        return $receiver.nextMinor();
      }.bind(null, this))().copy_94qy4s$(void 0, void 0, void 0, nextSuffix(this.suffix));
    else
      return this.copy_94qy4s$(void 0, void 0, void 0, nextSuffix(this.suffix));
  };
  SemVer.prototype.toString = function () {
    var optSuffix = this.suffix.length > 0 ? '-' + this.suffix : '';
    return this.major.toString() + '.' + this.minor + '.' + this.patch + optSuffix;
  };
  SemVer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SemVer',
    interfaces: [Comparable]
  };
  SemVer.prototype.component1 = function () {
    return this.major;
  };
  SemVer.prototype.component2 = function () {
    return this.minor;
  };
  SemVer.prototype.component3 = function () {
    return this.patch;
  };
  SemVer.prototype.component4 = function () {
    return this.suffix;
  };
  SemVer.prototype.copy_94qy4s$ = function (major, minor, patch, suffix) {
    return new SemVer(major === void 0 ? this.major : major, minor === void 0 ? this.minor : minor, patch === void 0 ? this.patch : patch, suffix === void 0 ? this.suffix : suffix);
  };
  SemVer.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.major) | 0;
    result = result * 31 + Kotlin.hashCode(this.minor) | 0;
    result = result * 31 + Kotlin.hashCode(this.patch) | 0;
    result = result * 31 + Kotlin.hashCode(this.suffix) | 0;
    return result;
  };
  SemVer.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.major, other.major) && Kotlin.equals(this.minor, other.minor) && Kotlin.equals(this.patch, other.patch) && Kotlin.equals(this.suffix, other.suffix)))));
  };
  function parseGitDescribe($receiver, nextVer) {
    var tmp$, tmp$_0;
    var tmp$_1;
    if ((tmp$ = GIT_DESCRIBE_REGEX.matchEntire_6bul2c$($receiver)) != null) {
      var tmp$_2 = tmp$.groupValues;
      var ver = tmp$_2.get_za3lpa$(1);
      var num = tmp$_2.get_za3lpa$(2);
      var semVer = toSemVer(ver);
      tmp$_1 = toInt(num) > 0 ? nextVer(semVer) : semVer;
    }
     else
      tmp$_1 = null;
    return (tmp$_0 = tmp$_1) != null ? tmp$_0 : toSemVer($receiver);
  }
  function nextSuffix($receiver) {
    var tmp$, tmp$_0;
    return ((tmp$_0 = (tmp$ = toIntOrNull($receiver)) != null ? tmp$ + 1 | 0 : null) != null ? tmp$_0 : 0).toString();
  }
  function parse(str) {
    return toSemVer(str);
  }
  function prereleaseFromGit_0(describeResult) {
    return prereleaseFromGit(describeResult);
  }
  function patchFromGit_0(describeResult) {
    return patchFromGit(describeResult);
  }
  var package$com = _.com || (_.com = {});
  var package$epam = package$com.epam || (package$com.epam = {});
  var package$drill = package$epam.drill || (package$epam.drill = {});
  var package$semver = package$drill.semver || (package$drill.semver = {});
  Object.defineProperty(package$semver, 'REGEX', {
    get: function () {
      return REGEX;
    }
  });
  Object.defineProperty(package$semver, 'UNSPECIFIED', {
    get: function () {
      return UNSPECIFIED;
    }
  });
  Object.defineProperty(package$semver, 'GIT_DESCRIBE_REGEX', {
    get: function () {
      return GIT_DESCRIBE_REGEX;
    }
  });
  package$semver.prereleaseFromGit_pdl1vz$ = prereleaseFromGit;
  package$semver.patchFromGit_pdl1vz$ = patchFromGit;
  package$semver.toSemVer_pdl1vz$ = toSemVer;
  package$semver.SemVer = SemVer;
  _.parse = parse;
  _.prereleaseFromGit = prereleaseFromGit_0;
  _.patchFromGit = patchFromGit_0;
  REGEX = Regex_init('v?(\\d+)\\.(\\d+)\\.(\\d+)(-[^\\s]+|)');
  UNSPECIFIED = new SemVer(0, 0, 0, 'unspecified');
  GIT_DESCRIBE_REGEX = Regex_init('([^\\s]+)-(\\d+)-g([0-9a-f]{3,})$');
  Kotlin.defineModule('semver', _);
  return _;
}(module.exports, require('kotlin')));

//# sourceMappingURL=semver.js.map
